"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ
"""
import asyncio
from sqlalchemy import select, func
from app.utils import logger
from app.core.database import AsyncSessionLocal
from app.models import Employee, ApplicationSystem, Access, EmployeeAccess


async def check_data():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –≤ –±–∞–∑–µ"""
    async with AsyncSessionLocal() as session:
        # –°—á–∏—Ç–∞–µ–º –∑–∞–ø–∏—Å–∏
        emp_count = await session.execute(select(func.count(Employee.id)))
        as_count = await session.execute(select(func.count(ApplicationSystem.id)))
        access_count = await session.execute(select(func.count(Access.id)))
        emp_access_count = await session.execute(select(func.count(EmployeeAccess.id)))
        
        logger.info("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:")
        logger.info("   üë• –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏: {emp_count.scalar()}")
        logger.info("   üè¢ –°–∏—Å—Ç–µ–º—ã (AS): {as_count.scalar()}")
        logger.info("   üîë –î–æ—Å—Ç—É–ø—ã: {access_count.scalar()}")
        logger.info("   üë§ –î–æ—Å—Ç—É–ø—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {emp_access_count.scalar()}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
        employees = await session.execute(
            select(Employee.full_name, Employee.employee_number)
            .limit(5)
        )
        
        logger.info("\nüë• –ü—Ä–∏–º–µ—Ä—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:")
        for emp in employees.scalars().all():
            logger.info("   - {emp}")


if __name__ == "__main__":
    asyncio.run(check_data())
